"0","```r


avg_overtime_pct <- 0.10
net_revenue_per_employee <- 250000
stock_option_cost <- 5000

data <- test_tbl 
h2o_model <- automl_leader

calculate_savings_by_threshold_3 <- function(data, h2o_model, threshold = 0, 
                                             tnr = 0, fpr = 1, fnr = 0, tpr = 1,
                                             avg_overtime_pct = 0.10,
                                             net_revenue_per_employee = 250000,
                                             stock_option_cost = 5000) {
  
  data_0_tbl <- as.tibble(data)
  
  # 4. Expected Value
  
  # 4.1 Calculating Expected Value with OT
  
  pred_0_tbl <- h2o_model %>%
    h2o.predict(newdata = as.h2o(data_0_tbl)) %>%
    as.tibble() %>%
    bind_cols(
      # Changed in _3 ---- 
      data_0_tbl %>%
        select(EmployeeNumber, MonthlyIncome, OverTime, StockOptionLevel)
    )
  
  ev_0_tbl <- pred_0_tbl %>%
    mutate(
      attrition_cost = calculate_attrition_cost(
        n = 1,
        salary = MonthlyIncome * 12,
        # changed in _2 -----
        net_revenue_per_employee = net_revenue_per_employee
      )
    ) %>%
    mutate(
      cost_of_policy_change = 0
    ) %>%
    mutate(
      expected_attrition_cost = 
        Yes * (attrition_cost + cost_of_policy_change) +
        No  * (cost_of_policy_change)
    )
  
  total_ev_0_tbl <- ev_0_tbl %>%
    summarise(
      total_expected_attrition_cost_0 = sum(expected_attrition_cost)
    )
  
  # 4.2 Calculating Expected Value with Targeted OT & Stock Option Policy
  
  data_1_tbl <- data_0_tbl %>%
    add_column(Yes = pred_0_tbl$Yes) %>%
    mutate(
      OverTime = case_when(
        Yes >= threshold ~ factor(\"No\", levels = levels(data_0_tbl$OverTime)) ,
        TRUE ~ OverTime
      )
    ) %>%
    # Changed in _3 ----
    mutate(
      StockOptionLevel = case_when(
        Yes >= threshold & StockOptionLevel == 0 
        ~ factor(\"1\", levels = levels(data_0_tbl$StockOptionLevel)) ,
        TRUE ~ StockOptionLevel
      )
    ) %>%
    select(-Yes) 
  
  pred_1_tbl <- h2o_model %>%
    h2o.predict(newdata = as.h2o(data_1_tbl)) %>%
    as.tibble() %>%
    # Changed in _3 ----
    bind_cols(
      data_0_tbl %>%
        select(EmployeeNumber, MonthlyIncome, OverTime, StockOptionLevel),
      data_1_tbl %>%
        select(OverTime, StockOptionLevel)
    ) %>%
    rename(
      OverTime_0 = OverTime,
      OverTime_1 = OverTime1,
      # Changed in _3 ----
      StockOptionLevel_0 = StockOptionLevel,
      StockOptionLevel_1 = StockOptionLevel1   
    )
  

  avg_overtime_pct <- avg_overtime_pct # changed in _2 ----
  stock_option_cost <- stock_option_cost # changed in _3 ----
  
  
  ev_1_tbl <- pred_1_tbl %>%
    mutate(
      attrition_cost = calculate_attrition_cost(
        n = 1,
        salary = MonthlyIncome * 12,
        # changed in _2 ----
        net_revenue_per_employee = net_revenue_per_employee
      )
    ) %>%
    # Changed in _3 ----
    # cost OT
    mutate(
      cost_OT = case_when(
        OverTime_0 == \"Yes\" & OverTime_1 == \"No\"
        ~  avg_overtime_pct * MonthlyIncome * 12,
        TRUE ~ 0
      )
    ) %>%
    # cost Stock Option
    mutate(
      cost_SO = case_when(
        StockOptionLevel_1 == \"1\" & StockOptionLevel_0 == \"0\"
        ~ stock_option_cost,
        TRUE ~ 0
      )
    ) %>%
    mutate(cost_of_policy_change = cost_OT + cost_SO) %>%
    mutate(
      cb_tn = cost_of_policy_change,
      cb_fp = cost_of_policy_change,
      cb_tp = cost_of_policy_change + attrition_cost,
      cb_fn = cost_of_policy_change + attrition_cost,
      expected_attrition_cost = 
        Yes * (tpr * cb_tp + fnr * cb_fn) +
        No *  (tnr * cb_tn + fpr * cb_fp)
    )
  
  total_ev_1_tbl <- ev_1_tbl %>%
    summarise(
      total_expected_attrition_cost_1 = sum(expected_attrition_cost)
    )
  
  # 4.3 Savings Calculation
  savings_tbl <- bind_cols(
    total_ev_0_tbl,
    total_ev_1_tbl
  ) %>%
    mutate(
      savings = total_expected_attrition_cost_0 -  total_expected_attrition_cost_1,
      pct_savings = savings / total_expected_attrition_cost_0
    )
  
  return(savings_tbl$savings)
  
}

```"
